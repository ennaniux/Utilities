#+title: README
#+author: ennaniux

* Utilities

Some (Bash) shell code to play with.

* prinkscape2pdfmultilayer.sh

When using INKSCAPE as an online board one can use different layers.
This code prints every layer of the .svg file into a page of a single pdf file.

#+begin_example
./prinkscape2pdfmultilayer.sh file.svg
#+end_example


* template_example.sh

This is a template of a template. It reads information from a csv file and prints a report containing information of each row.
Ideal when you want to prepare multiple reports, or multiple emails.


From our data file:
#+begin_src bash :exports both
cat template_data.csv
#+end_src

#+RESULTS:
| name | surname | email                 |
| John | Air     | john1@email.com       |
| John | Blair   | johnBlair@email.com   |
| Juan | Aire    | juanitoaire@email.com |
| Pepe | Pecas   | pepec@email.com       |


We generate the following messages

#+begin_src bash :results output :exports both
./template_example.sh template_data.csv 
#+end_src

#+RESULTS:
#+begin_example
2

This is Just an Example

Dear John Air

This is a test for a report that will be sent to your email:
john1@email.com

I can also send you the following function output:
"Hello test"

Best wishes,
the sender.


3

This is Just an Example

Dear John Blair

This is a test for a report that will be sent to your email:
johnBlair@email.com

I can also send you the following function output:
"Hello test"

Best wishes,
the sender.


4

This is Just an Example

Dear Juan Aire

This is a test for a report that will be sent to your email:
juanitoaire@email.com

I can also send you the following function output:
"Hello test"

Best wishes,
the sender.


5

This is Just an Example

Dear Pepe Pecas

This is a test for a report that will be sent to your email:
pepec@email.com

I can also send you the following function output:
"Hello test"

Best wishes,
the sender.


#+end_example

* CSS styles for org-notes into html

These are styles I mainly use to export my org-notes to html 

Usage 1: Link to the css file by adding in the org-file header the following

#+begin_example
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/path_to/Utilities/style04.css"/> 
#+end_example

Usage 2: Run the following code block (at the beginning of the org file). This will create a drawer called =:results:= with the css code inside. Then, export to html as usual, and the style will be embedded in the html file.

#+begin_example
#+begin_src bash :var file="/path_to/Utilities/style04.css" :results output drawer :exports results
echo "<style>" "$(cat $file)" "</style>" | awk ' {print $0="#+HTML_HEAD:"$0}'
#+end_src
#+end_example

* Some AWK tricks

One of the useful features of AWK is without a doubt associative arrays.

The AWK's analogue to R's table
#+begin_example sh 
awk -F"," 'NR>1{a[$1]++} END { for (i in a) print i, a[i]}' 
#+end_example

The AWK's analogue to R's tapply
#+begin_example sh
awk -F"," 'NR>1{a[$1]+=$2} END { for (i in a) print i, a[i]}' 
#+end_example

Select a column by name. Suppose that one of the col names in a csv file is
="VAR"= (with the quotation marks) Then to have a simple frequency table we write

#+begin_example
awk -F"," 'NR==1 {
    for (i=1; i<=NF; i++) {
        f[$i] = i
    }
print $f["\"VAR\""], "Count"
}
NR>1{ a[$(f["\"VAR\""])]++ } END{ for (i in a) print i, a[i]}' $FILE
#+end_example


** Simple Linear Regression with AWK

Check the code for an implementation of a Simple Linear Regression in AWK.

+ tletl_SLR.sh

The file =FILE.csv= contains a data frame with headers in the first row, and we want to perform 
a linear regression with the independent variable =X= in the second column =$2=,
and the dependent variable =Y= in the =$8= column. Then we do

#+begin_example sh
awk 'BEGIN{FS=OFS=","}{print $2, $8}' FILE.csv | tletl_SLR.sh 
Slope: 17500 Intercept: -219688.935 r-square: 0.02917 Adj-r-square: 0.02747
#+end_example



* Dealing with different encoding in Linux

To check what is the encoding of a file:

#+begin_example
file -i foo
#+end_example

To change from iso-8859-1 to UTF-8

#+begin_example
iconv -f iso-8859-1 -t UTF-8//TRANSLIT foofile -o outfile
#+end_example

* Bash code to export to html an org-file

When generating reports, we would like to do it via emacs org-mode. It can export to html, latex, pdf, odt and others.
In the bash file redirect =echo $REPORT > file foofile.org= and then we can add the following line:

#+begin_example
emacs --batch --eval "(require 'org)" foofile.org --funcall org-html-export-to-html
#+end_example

* Export Bash variables to Rscript

Here there is an example of yet another way to use variables from a shell/bash script into
an expression in ~Rscript~. The shell script is named ~foo.sh~ and the first argument in the 
terminal is a csv file. 

Usage: ~$foo.sh file.csv~

foo.sh content:
#+begin_example bash
#!/bin/bash

FILE=$1

export FILE

Rscript -e '
VAR <- Sys.getenv("FILE")
print(VAR)
datasource  <- read.csv(VAR,sep=",")
head(datasource)
'
#+end_example

* Some C code

** Understanding ~argv~ and ~argc~.

The following C code

#+begin_example C

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]){

  if (argc < 3) {
            printf("ERROR: You need at least two arguments.\n");
            return -1;
    }

  printf("No. of arguments: %d\n", argc);
  printf("---------------------- \n");

  printf("Input\t\t|Description  \t\t\t |\t2nd letter\n");
  printf("%s\t\t|Name of the program  \t\t |\t\t%c\n", *argv, *(*argv)+1);
  printf("%s\t\t|The 1st char of the 1st argument|\t\t%c\n", *(argv+1),*(*(argv+1)+0) );
  printf("%s\t\t|The 2nd char of the 2nd argument|\t\t%c\n", *(argv+2), *(*(argv+2)+1) );

  return 0;
}

#+end_example

Gives the following output

~$ ./a -+uno -dos -tres~

#+begin_example ascii
No. of arguments: 4
---------------------- 
Input		|Description  			 |	2nd letter
./a		|Name of the program  		 |		/
-+uno		|The 1st char of the 1st argument|		-
-dos		|The 2nd char of the 2nd argument|		d
#+end_example

